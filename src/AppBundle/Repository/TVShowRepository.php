<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * TVShowRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TVShowRepository extends \Doctrine\ORM\EntityRepository
{
	public function searchWithPagination($keyword, $page, $maxResult)
	{
		if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($maxResult)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $maxResult est incorrecte (valeur : ' . $maxResult . ').'
            );
        }

		$query = $this
			->createQueryBuilder('s')
			->where('s.name LIKE :keyword')
			->orWhere('s.synopsis LIKE :keyword')
			->setParameter('keyword', '%'.$keyword.'%')
			->getQuery();

		$firstResult = ($page - 1) * $maxResult;
        $query->setFirstResult($firstResult)->setMaxResults($maxResult);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $firstResult) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
	}

	 public function findAllWithPagination($page, $maxResult)
    {
        if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($maxResult)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $maxResult est incorrecte (valeur : ' . $maxResult . ').'
            );
        }
    
        $query = $this
        	->createQueryBuilder('s')
        	->getQuery();

        $firstResult = ($page - 1) * $maxResult;
        $query->setFirstResult($firstResult)->setMaxResults($maxResult);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $firstResult) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }

}